---
layout: page
title: Cron and Rails Runner
length: 60
tags: cron, runner, whenever, background
status: draft
---

# Cron and Rails Runner
### Setup
Clone the [sample Rails app](https://github.com/turingschool-examples/cron_and_rails_runner).

```
$ bundle
$ git checkout 24cfb78
$ rake db:migrate db:seed
$ rails s
```

### Our Sample App

Visit http://localhost:3000/tasks to view a table of tasks.
You should see a list of 10 tasks.

If you look at `task.rb` you will see a simple method, `.cleanup_completed`. This deletes completed tasks from the database.

Go ahead and fire up a rails console and run this method.

```
$ rails c
$ Task.cleanup_completed
```

This should delete 3 rows from the database. Refresh the browser and you should see only incomplete tasks.

### Meet `rails runner`

`rails runner` gives us the ability to run methods from the command line.

```
$ bin/rails runner "Task.delete_all"
```

If you refresh your browser there should be no tasks present.

Re-populate the list by running `rake db:seed`. Refresh your browser and confirm you have 10 tasks.

Use `rails runner` to run the `.cleanup_completed` method and confirm  it removes all completed tasks.

### Cron

Make sure you have completed tasks in the database before proceeding.

What is [cron](http://en.wikipedia.org/wiki/Cron)?

Let's create a background task to run our `.cleanup_completed` method by editing our crontab.

```
$ crontab -e
```

Add the line below replacing `/PATH/TO/RAILS_DIRECTORY` with the path relevant to your local machine:

```
* * * * * /bin/bash -l -c 'cd /PATH/TO/RAILS_DIRECTORY && bin/rails runner -e development '\''Task.cleanup_completed'\'''
```

Save that file and you should see the completed tasks deleted from the tasks table in the browser in about 1 minute.

### The Whenever Gem

Cron is useful, but somewhat cryptic. Wouldn't it be awesome if we could use Ruby to generate our crontab? Enter the whenever gem.

View the documentation on [Github](https://github.com/javan/whenever).

```
$ git checkout a5a586b
```

You should have a new file: `config/schedule.rb`. This file was generated by the gem prior to cloning. If you run `whenever` you should see code that looks similar to what is currently in your crontab. One difference is that it will use the production environment by default.

You should also see a message that includes `your crontab file was not updated.`. To write to the crontab, use the `-w` flag.

```
$ whenever -w
[write] crontab file written
```

If you run `crontab -e` you should see something similar:

```
 1 # Begin Whenever generated tasks for: /PATH/TO/RAILS_DIRECTORY/schedule.rb
  2 * * * * * /bin/bash -l -c 'cd /PATH/TO/RAILS_DIRECTORY && bin/rails runner -e production '\''Task.cleanup_complet#
  3
  4
  5 # End Whenever generated tasks for: /PATH/TO/RAILS_DIRECTORY/schedule.rb
```

Replace `production` with `development` and save. Update the task list to include completed tasks and confirm they are being cleared out.

### Things to Try:

Whenever allows other commands to be used in addition to `runner`.

* Use `command` in `schedule.rb` to remove the `development.log` every day. Pick a time that will allow you to see the change.

* Use `rake` to run a rake task within `schedule.rb`. Run this once a week on a specific day (Monday, Tuesday, Wednesday etc.) at a set time. Pick a day and time that will allow you to see the change.

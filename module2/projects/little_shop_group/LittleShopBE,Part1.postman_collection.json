{
	"info": {
		"_postman_id": "68d3ec3f-5f5a-4d00-b08a-c5d6d9e7a5db",
		"name": "Little Shop BE, Part 1",
		"description": "Turing School of Software & Design, Software Engineering Program Module 2\n\n\"Little Shop BE\" is a Rails-based API which mimics an e-commerce platform reporting tool as an API. Users can query and store merchants and items, and retrieve information about an item's merchant, or a list of a merchant's items.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22241276"
	},
	"item": [
		{
			"name": "1a. Merchants",
			"item": [
				{
					"name": "Get All Merchants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest('http://localhost:3000/api/v1/merchants', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, all merchants returned are same as in db', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('first_merchant_name'));",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants?count=true', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path for count parameter, merchants returned with item_count', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data[0].attributes.item_count).to.eq(pm.globals.get('first_merchant_item_count'));",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants?sorted=age', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path for sort parameter, all merchants returned and sorted', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data[0].attributes.name).to.not.eq(pm.globals.get('first_merchant_name'));",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants?status=returned', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path for status filter, all merchants with invoices indicated returned items are returned', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('returned_merchant_name'));",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('first_merchant_name', 'Schroeder-Jerde');",
									"pm.globals.set('twenty_first_merchant_name', 'Leffler, Rice and Leuschke');",
									"pm.globals.set('fiftieth_merchant_name', 'Paucek Inc');",
									"pm.globals.set('first_merchant_item_count', 15);",
									"pm.globals.set('returned_merchant_name', 'Glover Inc');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_id', 42);",
									"",
									"pm.globals.set('merchant_name', 'Glover Inc');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch one merchant by id\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"},",
									"                        },",
									"                        \"required\": [\"name\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 1 attribute",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(String(pm.globals.get('merchant_id')));",
									"    pm.expect(data.type).to.eq('merchant');",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('merchant_name'));",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/8923987297', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchant_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Merchant's Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_id', 99);",
									"",
									"pm.globals.set('expected_item_ids', [",
									"    2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,",
									"    2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,",
									"    2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426,",
									"    2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436,",
									"    2437, 2438",
									"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch all items\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const item_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": { \"type\": \"string\"},",
									"                    \"description\": { \"type\": \"string\"},",
									"                    \"unit_price\": { \"type\": \"number\"},",
									"                    \"merchant_id\": { \"type\": \"number\"},",
									"                },",
									"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_item = data[0];",
									"",
									"    // now check that the whole schema matches and has the right number of items",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(pm.globals.get('expected_item_ids').length);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_item).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 4 attributes",
									"    pm.expect(Object.keys(first_item.attributes).length).to.eq(4);",
									"",
									"    // double check that every ID in our list of expected IDs is in the actual data",
									"    // we've already matched that the count of elements matched above",
									"    var ids_in_payload = data.map(data => Number(data.id))",
									"    ids_in_payload.sort();",
									"    var expected_ids = pm.globals.get('expected_item_ids');",
									"    expected_ids.sort();",
									"    expected_ids.forEach((num,idx) => {",
									"        pm.expect(expected_ids[idx]).to.eq(ids_in_payload[idx]);",
									"    })",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/8923987297/items', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchant_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create (and Delete) One Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(201);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"}",
									"                        },",
									"                        \"required\": [\"name\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var id_to_delete = Number(data.id);",
									"    var url = `http://localhost:3000/api/v1/merchants/${id_to_delete}`",
									"    console.log('calling DELETE for', url)",
									"    pm.sendRequest({url: url, method: 'DELETE'}, function (err, response) {",
									"        if (err) {",
									"            console.log(err);",
									"        }",
									"    });",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 1 attribute",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.type).to.eq('merchant');",
									"    pm.expect(data.id).to.eq(String(id_to_delete));",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('merchant_name'));",
									"});",
									"",
									"pm.sendRequest({url: 'http://localhost:3000/api/v1/merchants', method: 'POST'}, (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('sad path, cannot create merchant without attributes', () => {",
									"        pm.expect(response.code).to.be.oneOf([400, 422]);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('message');",
									"        pm.expect(payload).to.have.property('errors')",
									"        pm.expect(payload.errors).to.be.an('array');",
									"        pm.expect(payload.errors[0]).be.a('string');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_name', 'New Merchant');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{merchant_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update One Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_id', 4);",
									"",
									"pm.sendRequest(`http://localhost:3000/api/v1/merchants/${pm.globals.get('merchant_id')}`, (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    } else {",
									"        var data = response.json().data;",
									"console.log(data);",
									"        pm.globals.set('old_merchant_name', data.attributes.name);",
									"    }",
									"});",
									"",
									"pm.globals.set('new_merchant_name', 'Merchant New and Improved');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, update one merchant by id\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"}",
									"                        },",
									"                        \"required\": [\"name\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // restore merchant to what it used to be",
									"    if (pm.globals.get('old_merchant_name') !== null) {",
									"        const patchRequest = {",
									"            url: `http://localhost:3000/api/v1/merchants/${pm.globals.get('merchant_id')}`,",
									"            method: 'PATCH',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            },",
									"            body: JSON.stringify({",
									"                name: pm.globals.get('old_merchant_name')",
									"            })",
									"        };",
									"        pm.sendRequest(patchRequest, (error, response) => {",
									"            console.log(error ? error : response.json());",
									"        });",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 1 attributes",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(String(pm.globals.get('merchant_id')));",
									"    pm.expect(data.type).to.eq('merchant');",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('new_merchant_name'));",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:3000/api/v1/merchants/99999999`,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"}, (error, response) => {",
									"    pm.test('edge case, bad merchant id returns 400 or 404', () => {",
									"        pm.expect(response.code).to.be.oneOf([400, 404]);",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:3000/api/v1/merchants/string-instead-of-integer`,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: JSON.stringify({",
									"        name: pm.globals.get('old_item_name')",
									"    })",
									"}, (error, response) => {",
									"    pm.test('edge case, string id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{new_merchant_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchant_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1b. Items",
			"item": [
				{
					"name": "Get All Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch all items\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const item_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": { \"type\": \"string\"},",
									"                    \"description\": { \"type\": \"string\"},",
									"                    \"unit_price\": { \"type\": \"number\"},",
									"                    \"merchant_id\": { \"type\": \"number\"},",
									"                },",
									"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_item = data[0];",
									"",
									"    // now check that the whole schema matches and has 2483 items",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_item).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 4 attributes",
									"    pm.expect(Object.keys(first_item.attributes).length).to.eq(4);",
									"",
									"    pm.expect(first_item.attributes.name).to.eq(pm.globals.get('first_item_name'));",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/items?sorted=price', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path for sort parameter, all items returned and sorted by price', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data[0].attributes.unit_price).to.eq(pm.globals.get('cheapest_item_price'));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('first_item_name', 'Item Nemo Facere' );",
									"pm.globals.set('twenty_first_item_name', 'Item Rerum Ab');",
									"pm.globals.set('fiftieth_item_name', 'Item Sunt Nesciunt');",
									"",
									"pm.globals.set('total_item_count', 2483);",
									"",
									"pm.globals.set('cheapest_item_price', 0.38);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('item_id', 179);",
									"",
									"pm.globals.set('item_name', 'Item Qui Veritatis');",
									"pm.globals.set('item_description', 'Totam labore quia harum dicta eum consequatur qui. Corporis inventore consequatur. Illum facilis tempora nihil placeat rerum sint est. Placeat ut aut. Eligendi perspiciatis unde eum sapiente velit.');",
									"pm.globals.set('item_price', 906.17);",
									"pm.globals.set('item_merchant_id', 9);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch one item by id\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"},",
									"                            \"description\": { \"type\": \"string\"},",
									"                            \"unit_price\": { \"type\": \"number\"},",
									"                            \"merchant_id\": { \"type\": \"number\"},",
									"                        },",
									"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 4 attributes",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(String(pm.globals.get('item_id')));",
									"    pm.expect(data.type).to.eq('item');",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('item_name'));",
									"    pm.expect(data.attributes.description).to.eq(pm.globals.get('item_description'));",
									"    pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('item_price'));",
									"    pm.expect(data.attributes.merchant_id).to.eq(pm.globals.get('item_merchant_id'));",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/items/8923987297', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/items/string-instead-of-integer', (error, response) => {",
									"    pm.test('edge case, string id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/items/{{item_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create (then Delete) One Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(201);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"},",
									"                            \"description\": { \"type\": \"string\"},",
									"                            \"unit_price\": { \"type\": \"number\"},",
									"                            \"merchant_id\": { \"type\": \"number\"},",
									"                        },",
									"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var id_to_delete = Number(data.id);",
									"    var url = `http://localhost:3000/api/v1/items/${id_to_delete}`",
									"    console.log('calling DELETE for', url)",
									"    pm.sendRequest({url: url, method: 'DELETE'}, function (err, response) {",
									"        if (err) {",
									"            console.log(err);",
									"        }",
									"    });",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 4 attributes",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.type).to.eq('item');",
									"    pm.expect(data.id).to.eq(String(id_to_delete));",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('item_name'));",
									"    pm.expect(data.attributes.description).to.eq(pm.globals.get('item_description'));",
									"    pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('item_price'));",
									"    pm.expect(data.attributes.merchant_id).to.eq(pm.globals.get('item_merchant_id'));",
									"});",
									"",
									"// TODO: sad path where attribute types are not correct",
									"// TODO: edge case where all attributes are missing",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('item_name', 'Shiny Itemy Item');",
									"pm.globals.set('item_description', 'It does a lot of things real good.');",
									"pm.globals.set('item_price', 123.45);",
									"pm.globals.set('item_merchant_id', 43);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{item_name}}\",\n  \"description\": \"{{item_description}}\",\n  \"unit_price\": {{item_price}},\n  \"merchant_id\": {{item_merchant_id}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update One Item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('item_id', 179);",
									"",
									"pm.sendRequest(`http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`, (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    } else {",
									"        var data = response.json().data;",
									"console.log(data);",
									"        pm.globals.set('old_item_name', data.attributes.name);",
									"        pm.globals.set('old_item_description', data.attributes.description);",
									"        pm.globals.set('old_item_price', data.attributes.unit_price);",
									"        pm.globals.set('old_item_merchant_id', data.attributes.merchant_id);",
									"    }",
									"});",
									"",
									"pm.globals.set('new_item_name', 'Shiny Itemy Item, New and Improved');",
									"pm.globals.set('new_item_description', 'It does a lot of things even more good than before!');",
									"pm.globals.set('new_item_price', 65.23);",
									"pm.globals.set('new_item_merchant_id', 56);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch one item by id\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"},",
									"                            \"description\": { \"type\": \"string\"},",
									"                            \"unit_price\": { \"type\": \"number\"},",
									"                            \"merchant_id\": { \"type\": \"number\"},",
									"                        },",
									"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // restore item to what it used to be",
									"    if (pm.globals.get('old_item_name') !== null) {",
									"        const postRequest = {",
									"            url: `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`,",
									"            method: 'PUT',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            },",
									"            body: JSON.stringify({",
									"                name: pm.globals.get('old_item_name'),",
									"                description: pm.globals.get('old_item_description'),",
									"                unit_price: pm.globals.get('old_item_price'),",
									"                merchant_id: pm.globals.get('old_item_merchant_id')",
									"            })",
									"        };",
									"        pm.sendRequest(postRequest, (error, response) => {",
									"            console.log(error ? error : response.json());",
									"        });",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 4 attributes",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(String(pm.globals.get('item_id')));",
									"    pm.expect(data.type).to.eq('item');",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('new_item_name'));",
									"    pm.expect(data.attributes.description).to.eq(pm.globals.get('new_item_description'));",
									"    pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('new_item_price'));",
									"    pm.expect(data.attributes.merchant_id).to.eq(pm.globals.get('new_item_merchant_id'));",
									"});",
									"",
									"",
									"var item_url = `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`;",
									"console.log('happy path with partial data', item_url);",
									"pm.sendRequest({",
									"    url: item_url,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: JSON.stringify({",
									"        unit_price: pm.globals.get('new_item_price'),",
									"    })",
									"}, (error, response) => {",
									"    pm.test('happy path, works with only partial data, too', () => {",
									"        pm.expect(response.code).to.be.oneOf([200,201,202]);",
									"",
									"        // restore the old price immediately",
									"        if (pm.globals.get('old_item_name') !== null) {",
									"            const postRequest = {",
									"                url: `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`,",
									"                method: 'PUT',",
									"                header: {",
									"                    'Content-Type': 'application/json',",
									"                },",
									"                body: JSON.stringify({",
									"                    unit_price: pm.globals.get('old_item_price'),",
									"                })",
									"            };",
									"            pm.sendRequest(postRequest, (error, response) => {",
									"                console.log(error ? error : response.json());",
									"            });",
									"        }",
									"",
									"        // expect a \"data\" attribute",
									"        pm.response.to.have.jsonBody('data');",
									"        var jsonData = pm.response.json();",
									"        var data = jsonData.data;",
									"    ",
									"        pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('new_item_price'));",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:3000/api/v1/items/12435678912354`,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: JSON.stringify({",
									"        name: pm.globals.get('old_item_name'),",
									"        description: pm.globals.get('old_item_description'),",
									"        unit_price: pm.globals.get('old_item_price'),",
									"        merchant_id: pm.globals.get('old_item_merchant_id')",
									"    })",
									"}, (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: JSON.stringify({",
									"        merchant_id: 999999999999",
									"    })",
									"}, (error, response) => {",
									"    pm.test('edge case, bad merchant id returns 400 or 404', () => {",
									"        pm.expect(response.code).to.be.oneOf([400, 404]);",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:3000/api/v1/items/string-instead-of-integer`,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: JSON.stringify({",
									"        name: pm.globals.get('old_item_name'),",
									"        description: pm.globals.get('old_item_description'),",
									"        unit_price: pm.globals.get('old_item_price'),",
									"        merchant_id: pm.globals.get('old_item_merchant_id')",
									"    })",
									"}, (error, response) => {",
									"    pm.test('edge case, string id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									"// TODO: edge case where all attributes are missing",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{new_item_name}}\",\n    \"description\": \"{{new_item_description}}\",\n    \"unit_price\": {{new_item_price}},\n    \"merchant_id\": {{new_item_merchant_id}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/items/{{item_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Item's Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('item_id', 209);",
									"",
									"pm.globals.set('merchant_name', 'Pollich and Sons');",
									"pm.globals.set('merchant_id', 11);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch one merchant by id\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"name\": { \"type\": \"string\"},",
									"                        },",
									"                        \"required\": [\"name\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 1 attribute",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(String(pm.globals.get('merchant_id')));",
									"    pm.expect(data.type).to.eq('merchant');",
									"    pm.expect(data.attributes.name).to.eq(pm.globals.get('merchant_name'));",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/items/8923987297/merchant', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/items/string-instead-of-integer/merchant', (error, response) => {",
									"    pm.test('edge case, string id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/items/{{item_id}}/merchant",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"items",
								"{{item_id}}",
								"merchant"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1c. Invoices and Customers",
			"item": [
				{
					"name": "Get All Customers for Given Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_id', 4);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch customer names for a given merchant\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const customer_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"first_name\": { \"type\": \"string\"},",
									"                    \"last_name\": { \"type\": \"string\"}",
									"                },",
									"                \"required\": [\"first_name\", \"last_name\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_customer = data[0];",
									"",
									"    // now check that the whole schema matches and has the right number of items",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(50);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_customer).to.have.jsonSchema(customer_schema);",
									"",
									"    // expect customer data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_customer).length).to.eq(3);",
									"",
									"    // expect that our customer \"attributes\" portion has exactly 2 attributes",
									"    pm.expect(Object.keys(first_customer.attributes).length).to.eq(2);",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/8923987297/customers', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchant_id}}",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Invoices for Given Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_id', 86);",
									"pm.globals.set('filtered_invoice_id', '4844');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch invoices for a given merchant\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const invoice_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"merchant_id\": { \"type\": \"number\"},",
									"                    \"customer_id\": { \"type\": \"number\"},",
									"                    \"status\": { \"type\": \"string\"}",
									"                },",
									"                \"required\": [\"merchant_id\", \"customer_id\", \"status\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_invoice = data[0];",
									"",
									"    // now check that the whole schema matches and has the right number of invoices",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(57);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_invoice).to.have.jsonSchema(invoice_schema);",
									"",
									"    // expect customer data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_invoice).length).to.eq(3);",
									"",
									"    // expect that our customer \"attributes\" portion has exactly 3 attributes",
									"    pm.expect(Object.keys(first_invoice.attributes).length).to.eq(3);",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/8923987297/invoices', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/86/invoices?status=packaged', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path for status, all invoices returned for given status', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"        pm.expect(payload.data[0].id).to.eq(pm.globals.get('filtered_invoice_id'));",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}/invoices",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchant_id}}",
								"invoices"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}